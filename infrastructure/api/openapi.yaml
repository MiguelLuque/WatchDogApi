openapi: 3.0.2
info:
  title: API-First Spring Boot Example
  description: "Simple example of API-First integration in a Spring Boot application!"
  version: 1.0.0-SNAPSHOT
tags:
  - name: announcements
    description: Operations with announcements
  - name: tags
    description: Operations with tags
  - name: auth
    description: Authentication operations
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: log in user
      description: generate JWT
      operationId: login
      requestBody:
        description: Retrieve token for user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'


  /auth/registration:
    post:
      tags:
        - auth
      summary: register a new user as customer user
      description: generate JWT
      operationId: registration
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Email already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /announcements:
    get:
      tags:
        - announcements
      summary: Get all announcements sorted by date
      description: Get all announcements
      operationId: findAllAnnouncements
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of pages to skip before starting to collect the result set
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: postalCode
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: breed
          schema:
            type: string
        - in: query
          name: province
          schema:
            type: string
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
        - in: query
          name: endDate
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementPage'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
              example:
                code: REQUEST_VALIDATION_ERROR
                error: There are some validation errors

    post:
      tags:
        - announcements
      summary: Create an announcement
      description: Create a new announcement in the system
      operationId: createAnnouncement
      requestBody:
        description: Announcement to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDto'
        required: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
      x-codegen-request-body-name: body
    put:
      tags:
        - announcements
      summary: Update announcement
      description: Update announcement in the system
      operationId: updateAnnouncement
      requestBody:
        description: Updated announcement
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
        404:
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
      x-codegen-request-body-name: body


  /users/{userId}/announcements:
    get:
      tags:
        - announcements
      summary: Get all announcements from an user
      description: Get all announcements from an user
      operationId: findAllUserAnnouncements
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of pages to skip before starting to collect the result set
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: postalCode
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: breed
          schema:
            type: string
        - in: query
          name: province
          schema:
            type: string
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
        - in: query
          name: endDate
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementPage'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
              example:
                code: REQUEST_VALIDATION_ERROR
                error: There are some validation errors

  /announcements/{announcementId}:
    get:
      tags:
        - announcements
      summary: Get a announcement by ID
      description: Get a announcement by ID
      operationId: findAnnouncementById
      parameters:
        - name: announcementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
              example:
                code: REQUEST_VALIDATION_ERROR
                error: There are some validation errors
        404:
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      tags:
        - announcements
      summary: Delete a announcement
      description: Delete a announcement
      operationId: DeleteAnnouncement
      parameters:
        - name: announcementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
              example:
                code: REQUEST_VALIDATION_ERROR
                error: There are some validation errors
        404:
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

components:
  schemas:
    AnnouncementDto:
      type: object
      required:
        - title
        - description
        - specie
        - contact
        - date
        - location
        - hasChip
        - isOwner
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          minLength: 10
          maxLength: 80
        description:
          type: string
          minLength: 10
          maxLength: 300
        specie:
          type: string
        breed:
          type: string
        color:
          type: string
        size:
          enum: [mini,standard,large,XL]
        street:
          type: string
        postalCode:
          type: string
        contact:
          type: string
        province:
          type: string
        location:
          type: string
        date:
          type: string
        hasChip:
          type: boolean
        isOwner:
          type: boolean
        picture:
          type: string
          format: base64
        name:
          type: string
        ownerId:
          type: integer
          format: int64

    AnnouncementPage:
      type: object
      required:
        - totalPages
        - currentPage
        - content
      properties:
        totalPages:
          type: number
        currentPage:
          type: number
        content:
          type: array
          items:
            $ref: '#/components/schemas/AnnouncementDto'

    AuthRequest:
      type: object
      required:
        - password
        - email
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'

    AuthResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        token:
          type: string

    UserDTO:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email

    ErrorDTO:
      type: object
      properties:
        code:
          type: string
          example: PET_NOT_FOUND
        error:
          type: string
          example: The announcement was not found